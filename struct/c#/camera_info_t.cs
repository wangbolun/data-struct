/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace lcmtypes
{
    public sealed class camera_info_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public byte change_lane;
        public float lane_width;
        public lcmtypes.camera_center_line_info_t center_line;
        public lcmtypes.camera_line_info_t[] lines;
        public short object_count;
        public lcmtypes.camera_object_t[] objects;
 
        public camera_info_t()
        {
            lines = new lcmtypes.camera_line_info_t[4];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x9b4a21eef809d38cL;
 
        static camera_info_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("lcmtypes.camera_info_t"))
                return 0L;
 
            classes.Add("lcmtypes.camera_info_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + lcmtypes.camera_center_line_info_t._hashRecursive(classes)
                 + lcmtypes.camera_line_info_t._hashRecursive(classes)
                 + lcmtypes.camera_object_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.change_lane); 
 
            outs.Write(this.lane_width); 
 
            this.center_line._encodeRecursive(outs); 
 
            for (int a = 0; a < 4; a++) {
                this.lines[a]._encodeRecursive(outs); 
            }
 
            outs.Write(this.object_count); 
 
            for (int a = 0; a < this.object_count; a++) {
                this.objects[a]._encodeRecursive(outs); 
            }
 
        }
 
        public camera_info_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public camera_info_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static lcmtypes.camera_info_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            lcmtypes.camera_info_t o = new lcmtypes.camera_info_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.change_lane = ins.ReadByte();
 
            this.lane_width = ins.ReadSingle();
 
            this.center_line = lcmtypes.camera_center_line_info_t._decodeRecursiveFactory(ins);
 
            this.lines = new lcmtypes.camera_line_info_t[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.lines[a] = lcmtypes.camera_line_info_t._decodeRecursiveFactory(ins);
            }
 
            this.object_count = ins.ReadInt16();
 
            this.objects = new lcmtypes.camera_object_t[(int) object_count];
            for (int a = 0; a < this.object_count; a++) {
                this.objects[a] = lcmtypes.camera_object_t._decodeRecursiveFactory(ins);
            }
 
        }
 
        public lcmtypes.camera_info_t Copy()
        {
            lcmtypes.camera_info_t outobj = new lcmtypes.camera_info_t();
            outobj.utime = this.utime;
 
            outobj.change_lane = this.change_lane;
 
            outobj.lane_width = this.lane_width;
 
            outobj.center_line = this.center_line.Copy();
 
            outobj.lines = new lcmtypes.camera_line_info_t[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.lines[a] = this.lines[a].Copy();
            }
 
            outobj.object_count = this.object_count;
 
            outobj.objects = new lcmtypes.camera_object_t[(int) object_count];
            for (int a = 0; a < this.object_count; a++) {
                outobj.objects[a] = this.objects[a].Copy();
            }
 
            return outobj;
        }
    }
}

