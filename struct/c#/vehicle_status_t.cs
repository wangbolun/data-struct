/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace lcmtypes
{
    public sealed class vehicle_status_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public int nauto;
        public float steerPos;
        public int steerSpe;
        public int light;
        public float speLeft;
        public float speRight;
        public float vot;
        public int shift;
        public float disLeft;
        public float disRight;
        public float speo;
        public float yawRate;
        public float accelerationLon;
        public float accelerationLat;
 
        public vehicle_status_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xfcb6ce9ed782f984L;
 
        static vehicle_status_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("lcmtypes.vehicle_status_t"))
                return 0L;
 
            classes.Add("lcmtypes.vehicle_status_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.nauto); 
 
            outs.Write(this.steerPos); 
 
            outs.Write(this.steerSpe); 
 
            outs.Write(this.light); 
 
            outs.Write(this.speLeft); 
 
            outs.Write(this.speRight); 
 
            outs.Write(this.vot); 
 
            outs.Write(this.shift); 
 
            outs.Write(this.disLeft); 
 
            outs.Write(this.disRight); 
 
            outs.Write(this.speo); 
 
            outs.Write(this.yawRate); 
 
            outs.Write(this.accelerationLon); 
 
            outs.Write(this.accelerationLat); 
 
        }
 
        public vehicle_status_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public vehicle_status_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static lcmtypes.vehicle_status_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            lcmtypes.vehicle_status_t o = new lcmtypes.vehicle_status_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.nauto = ins.ReadInt32();
 
            this.steerPos = ins.ReadSingle();
 
            this.steerSpe = ins.ReadInt32();
 
            this.light = ins.ReadInt32();
 
            this.speLeft = ins.ReadSingle();
 
            this.speRight = ins.ReadSingle();
 
            this.vot = ins.ReadSingle();
 
            this.shift = ins.ReadInt32();
 
            this.disLeft = ins.ReadSingle();
 
            this.disRight = ins.ReadSingle();
 
            this.speo = ins.ReadSingle();
 
            this.yawRate = ins.ReadSingle();
 
            this.accelerationLon = ins.ReadSingle();
 
            this.accelerationLat = ins.ReadSingle();
 
        }
 
        public lcmtypes.vehicle_status_t Copy()
        {
            lcmtypes.vehicle_status_t outobj = new lcmtypes.vehicle_status_t();
            outobj.utime = this.utime;
 
            outobj.nauto = this.nauto;
 
            outobj.steerPos = this.steerPos;
 
            outobj.steerSpe = this.steerSpe;
 
            outobj.light = this.light;
 
            outobj.speLeft = this.speLeft;
 
            outobj.speRight = this.speRight;
 
            outobj.vot = this.vot;
 
            outobj.shift = this.shift;
 
            outobj.disLeft = this.disLeft;
 
            outobj.disRight = this.disRight;
 
            outobj.speo = this.speo;
 
            outobj.yawRate = this.yawRate;
 
            outobj.accelerationLon = this.accelerationLon;
 
            outobj.accelerationLat = this.accelerationLat;
 
            return outobj;
        }
    }
}

