/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace lcmtypes
{
    public sealed class camera_object_t : LCM.LCM.LCMEncodable
    {
        public lcmtypes.float_point_2d_t centerPoint;
        public short id;
        public byte type;
        public byte brake;
        public byte turn;
        public float speedLon;
        public float speedLat;
        public float angle;
        public float confidence;
        public float width;
        public float height;
        public float length;
 
        public camera_object_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x3f776a8a93fd07c5L;
 
        static camera_object_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("lcmtypes.camera_object_t"))
                return 0L;
 
            classes.Add("lcmtypes.camera_object_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + lcmtypes.float_point_2d_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.centerPoint._encodeRecursive(outs); 
 
            outs.Write(this.id); 
 
            outs.Write(this.type); 
 
            outs.Write(this.brake); 
 
            outs.Write(this.turn); 
 
            outs.Write(this.speedLon); 
 
            outs.Write(this.speedLat); 
 
            outs.Write(this.angle); 
 
            outs.Write(this.confidence); 
 
            outs.Write(this.width); 
 
            outs.Write(this.height); 
 
            outs.Write(this.length); 
 
        }
 
        public camera_object_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public camera_object_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static lcmtypes.camera_object_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            lcmtypes.camera_object_t o = new lcmtypes.camera_object_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.centerPoint = lcmtypes.float_point_2d_t._decodeRecursiveFactory(ins);
 
            this.id = ins.ReadInt16();
 
            this.type = ins.ReadByte();
 
            this.brake = ins.ReadByte();
 
            this.turn = ins.ReadByte();
 
            this.speedLon = ins.ReadSingle();
 
            this.speedLat = ins.ReadSingle();
 
            this.angle = ins.ReadSingle();
 
            this.confidence = ins.ReadSingle();
 
            this.width = ins.ReadSingle();
 
            this.height = ins.ReadSingle();
 
            this.length = ins.ReadSingle();
 
        }
 
        public lcmtypes.camera_object_t Copy()
        {
            lcmtypes.camera_object_t outobj = new lcmtypes.camera_object_t();
            outobj.centerPoint = this.centerPoint.Copy();
 
            outobj.id = this.id;
 
            outobj.type = this.type;
 
            outobj.brake = this.brake;
 
            outobj.turn = this.turn;
 
            outobj.speedLon = this.speedLon;
 
            outobj.speedLat = this.speedLat;
 
            outobj.angle = this.angle;
 
            outobj.confidence = this.confidence;
 
            outobj.width = this.width;
 
            outobj.height = this.height;
 
            outobj.length = this.length;
 
            return outobj;
        }
    }
}

