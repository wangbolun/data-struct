/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace lcmtypes
{
    public sealed class camera_line_info_t : LCM.LCM.LCMEncodable
    {
        public float confidence;
        public byte type;
        public byte lineColor;
        public float length;
        public float a;
        public float b;
        public float c;
        public float d;
 
        public camera_line_info_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xcd8d81c467cdab4aL;
 
        static camera_line_info_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("lcmtypes.camera_line_info_t"))
                return 0L;
 
            classes.Add("lcmtypes.camera_line_info_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.confidence); 
 
            outs.Write(this.type); 
 
            outs.Write(this.lineColor); 
 
            outs.Write(this.length); 
 
            outs.Write(this.a); 
 
            outs.Write(this.b); 
 
            outs.Write(this.c); 
 
            outs.Write(this.d); 
 
        }
 
        public camera_line_info_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public camera_line_info_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static lcmtypes.camera_line_info_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            lcmtypes.camera_line_info_t o = new lcmtypes.camera_line_info_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.confidence = ins.ReadSingle();
 
            this.type = ins.ReadByte();
 
            this.lineColor = ins.ReadByte();
 
            this.length = ins.ReadSingle();
 
            this.a = ins.ReadSingle();
 
            this.b = ins.ReadSingle();
 
            this.c = ins.ReadSingle();
 
            this.d = ins.ReadSingle();
 
        }
 
        public lcmtypes.camera_line_info_t Copy()
        {
            lcmtypes.camera_line_info_t outobj = new lcmtypes.camera_line_info_t();
            outobj.confidence = this.confidence;
 
            outobj.type = this.type;
 
            outobj.lineColor = this.lineColor;
 
            outobj.length = this.length;
 
            outobj.a = this.a;
 
            outobj.b = this.b;
 
            outobj.c = this.c;
 
            outobj.d = this.d;
 
            return outobj;
        }
    }
}

